main.py
import os
import check_camera
import Capture_Image
import Train_Image
import Recognize
def title_bar():
 os.system('cls') 
 print("\t**********************************************")
 print("\t***** Face Recognition Attendance System *****")
 print("\t**********************************************")
def mainMenu():
 title_bar()
 print()
 print(10 * "*", "WELCOME MENU", 10 * "*")
 print("[1] Check Camera")
 print("[2] Capture Faces")
 print("[3] Train Images")
 print("[4] Recognize & Attendance")
 print("[5] Quit")
 while True:
 try:
 choice = int(input("Enter Choice: "))
 if choice == 1:
 checkCamera()
 break
 elif choice == 2:
 CaptureFaces()
 break
 elif choice == 3:
 Trainimages()
 break
 elif choice == 4:
 RecognizeFaces()
 break
 elif choice == 5:
 print("Thank You")
 break
 else:
 print("Invalid Choice. Enter 1-4")
 mainMenu()
 except ValueError:
 print("Invalid Choice. Enter 1-4\n Try Again")
 exit
def checkCamera():
 check_camera.camer()
 key = input("Enter any key to return main menu")
 mainMenu()
def CaptureFaces():
 Capture_Image.takeImages()
 key = input("Enter any key to return main menu")
 mainMenu(
def Trainimages():
 Train_Image.TrainImages()
 key = input("Enter any key to return main menu")
 mainMenu()
def RecognizeFaces():
 Recognize.recognize_attendence()
 key = input("Enter any key to return main menu")
 mainMenu()
mainMenu()
check_camera.py
def camer():
 import cv2
 face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
 cap = cv2.VideoCapture(0)
 while True:
 _, img = cap.read()
 gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
 faces = face_cascade.detectMultiScale(gray, 1.3, 5, minSize=(30, 30),flags =
cv2.CASCADE_SCALE_IMAGE)
 for (x, y, w, h) in faces:
 cv2.rectangle(img, (x, y), (x + w, y + h), (10,159,255), 2)
 cv2.imshow('Webcam Check', img)
 if cv2.waitKey(1) & 0xFF == ord('q'):
 break
 cap.release()
 cv2.destroyAllWindows()
capture_image.py
import csv
import cv2
import os
def is_number(s):
 try:
 float(s)
 return True
 except ValueError:
 pass
 try:
 import unicodedata
 unicodedata.numeric(s)
 return True
 except (TypeError, ValueError):
 pass
 return False
def takeImages():
 Id = input("Enter Your Id: ")
 name = input("Enter Your Name: ")
 if(is_number(Id) and name.isalpha()):
 cam = cv2.VideoCapture(0)
 harcascadePath = "haarcascade_frontalface_default.xml"
 detector = cv2.CascadeClassifier(harcascadePath)
 sampleNum = 0
 while(True):
 ret, img = cam.read()
 gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
 faces = detector.detectMultiScale(gray, 1.3, 5, minSize=(30,30),flags =
cv2.CASCADE_SCALE_IMAGE)
 for(x,y,w,h) in faces:
 cv2.rectangle(img, (x, y), (x+w, y+h), (10, 159, 255), 2)
 sampleNum = sampleNum+1
 cv2.imwrite("TrainingImage" + os.sep +name + "."+Id + '.' +
 str(sampleNum) + ".jpg", gray[y:y+h, x:x+w])
 cv2.imshow('frame', img)
 if cv2.waitKey(100) & 0xFF == ord('q'):
 break
 elif sampleNum > 100:
 break
 cam.release()
 cv2.destroyAllWindows()
 res = "Images Saved for ID : " + Id + " Name : " + name
 row = [Id, name]
 with open("StudentDetails"+os.sep+"StudentDetails.csv", 'a+') as csvFile:
 writer = csv.writer(csvFile)
 writer.writerow(row)
 csvFile.close()
 else:
 if(is_number(Id)):
 print("Enter Alphabetical Name")
 if(name.isalpha()):
 print("Enter Numeric ID")
train_image.py
import os
import time
import cv2
import numpy as np
from PIL import Image
from threading import Thread
def getImagesAndLabels(path):
 imagePaths = [os.path.join(path, f) for f in os.listdir(path)]
 faces = [
 Ids = []

 for imagePath in imagePaths:

 pilImage = Image.open(imagePath).convert('L')
 imageNp = np.array(pilImage, 'uint8')
 Id = int(os.path.split(imagePath)[-1].split(".")[1])
 faces.append(imageNp)
 Ids.append(Id)
 return faces, Ids
def TrainImages():
 recognizer = cv2.face_LBPHFaceRecognizer.create()
 harcascadePath = "haarcascade_frontalface_default.xml"
 detector = cv2.CascadeClassifier(harcascadePath)
 faces, Id = getImagesAndLabels("TrainingImage")
 Thread(target = recognizer.train(faces, np.array(Id))).start()

 Thread(target = counter_img("TrainingImage")).start()
 recognizer.save("TrainingImageLabel"+os.sep+"Trainner.yml")
 print("All Images")
def counter_img(path):
 imgcounter = 1
 imagePaths = [os.path.join(path, f) for f in os.listdir(path)]
 for imagePath in imagePaths:
 print(str(imgcounter) + " Images Trained", end="\r")
 time.sleep(0.008)
 imgcounter += 1
recognize.py
import datetime
import os
import time
import cv2
import pandas as pd
def recognize_attendence():
 recognizer = cv2.face.LBPHFaceRecognizer_create()
 recognizer.read("TrainingImageLabel"+os.sep+"Trainner.yml")
 harcascadePath = "haarcascade_frontalface_default.xml"
 faceCascade = cv2.CascadeClassifier(harcascadePath)
 df = pd.read_csv("StudentDetails"+os.sep+"StudentDetails.csv")
 font = cv2.FONT_HERSHEY_SIMPLEX
 col_names = ['Id', 'Name', 'Date', 'Time']
 attendance = pd.DataFrame(columns=col_names)
 cam = cv2.VideoCapture(0, cv2.CAP_DSHOW)
 cam.set(3, 640)
 cam.set(4, 480)

 minW = 0.1 * cam.get(3)
 minH = 0.1 * cam.get(4)
 while True:
 ret, im = cam.read()
 gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
 faces = faceCascade.detectMultiScale(gray, 1.2, 5,minSize = (int(minW),
int(minH)),flags = cv2.CASCADE_SCALE_IMAGE)
 for(x, y, w, h) in faces:
 cv2.rectangle(im, (x, y), (x+w, y+h), (10, 159, 255), 2)
 Id, conf = recognizer.predict(gray[y:y+h, x:x+w])
 if conf < 100:
 aa = df.loc[df['Id'] == Id]['Name'].values
 confstr = " {0}%".format(round(100 - conf))
 tt = str(Id)+"-"+aa
 else:
 Id = ' Unknown '
 tt = str(Id)
 confstr = " {0}%".format(round(100 - conf))
 if (100-conf) > 67:
 ts = time.time()
 date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
 timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
 aa = str(aa)[2:-2]
 attendance.loc[len(attendance)] = [Id, aa, date, timeStamp]
 tt = str(tt)[2:-2]
 if(100-conf) > 67:
 tt = tt + " [Pass]"
 cv2.putText(im, str(tt), (x+5,y-5), font, 1, (255, 255, 255), 2)
 else:
 cv2.putText(im, str(tt), (x + 5, y - 5), font, 1, (255, 255, 255), 2)
 if (100-conf) > 67:
 cv2.putText(im, str(confstr), (x + 5, y + h - 5), font,1, (0, 255, 0),1 )
 elif (100-conf) > 50:
 cv2.putText(im, str(confstr), (x + 5, y + h - 5), font, 1, (0, 255, 255), 1)
 else:
 cv2.putText(im, str(confstr), (x + 5, y + h - 5), font, 1, (0, 0, 255), 1)
 attendance = attendance.drop_duplicates(subset=['Id'], keep='first')
 cv2.imshow('Attendance', im)
 if (cv2.waitKey(1) == ord('q')):
 break
 ts = time.time()
 date = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
 timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')
 Hour, Minute, Second = timeStamp.split(":")
 print(attendance)
 fileName = "Attendance"+os.sep+"Attendance_"+date+"_"+Hour+"-"+Minute+"-
"+Second+".csv"
 attendance.to_csv(fileName, index=False)
 print("Attendance Successful")
 cam.release()
 cv2.destroyAllWindows()
